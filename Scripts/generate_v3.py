#!/usr/bin/env python

# =============================================================================
import itertools
import abc
# -----------------------------------------------------------------------------

# =============================================================================
def len_of_int(n: int) -> int:
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    return len(str(n))
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# -----------------------------------------------------------------------------

# =============================================================================
def float_to_int(n: float) -> int:
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    return int(round(abs(n)))
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# -----------------------------------------------------------------------------

# =============================================================================
list_op_names = ['+','-','*','|']
list_op_funcs = [lambda x,y: (x+y),
                 lambda x,y: (x-y),
                 lambda x,y: (x*y),
                 lambda x,y: x*10**len_of_int(int(round(abs(y)))) + int(round(abs(y)))]
num_op_count = len(list_op_names)
# -----------------------------------------------------------------------------

# =============================================================================
class NodeGeneric(abc.ABC):

    # =========================================================================
    count = 0

    # -------------------------------------------------------------------------

    # =========================================================================
    def __init__(self, left=None, right=None):
        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        self.__class__.count += 1
        self.index = self.count
        self.left = left
        self.right = right
        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # -------------------------------------------------------------------------

    # =========================================================================
    @abc.abstractmethod
    def __str__(self):
        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        raise NotImplementedError()
        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # -------------------------------------------------------------------------

    # =========================================================================
    def __len__(self):
        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        num_len = 1
        if self.left is not None:
            num_len += len(self.left)
        if self.right is not None:
            num_len += len(self.right)
        return num_len
        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # -------------------------------------------------------------------------

    # =========================================================================
    def is_leaf(self):
        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        return (self.left is None) and (self.right is None)
        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # -------------------------------------------------------------------------

# -----------------------------------------------------------------------------

# =============================================================================
class NodePostFixLabel(NodeGeneric):
    # =========================================================================
    def __str__(self):
        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        str_format = '{left}{right}0'
        if self.is_leaf():
            return '1'
            #return str_format.format(index='', left='', right='')
        else:
            return str_format.format(left=self.left, right=self.right)
        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # -------------------------------------------------------------------------

# -----------------------------------------------------------------------------

# =============================================================================
def all_possible_trees(n, nodeType):
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    if n == 1:
        yield nodeType()
    for split in range(1, n):
        gen_left = all_possible_trees(split, nodeType)
        gen_right = all_possible_trees(n - split, nodeType)
        for left, right in itertools.product(gen_left, gen_right):
            yield nodeType(left, right)
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# -----------------------------------------------------------------------------

# =============================================================================
if __name__ == '__main__':
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    for thing in all_possible_trees(4, NodePostFixLabel):
        print(thing)
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# -----------------------------------------------------------------------------